{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","state","task","handleChange","evt","setState","target","name","value","handleSubmit","preventDefault","props","createTodo","id","uuid","completed","className","onSubmit","this","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","removeTodo","toggleForm","handleUpdate","updateTodo","handleToggle","toggleTodo","onClick","class","TodoList","todos","create","newTodo","remove","filter","t","update","updatedTask","updatedTodos","map","todo","toggleCompletion","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8eea3e25.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  \r\n   state = { task: \"\" };\r\n   \r\n  handleChange = (evt) => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n    this.setState({ task: \"\" });\r\n  }\r\n  render() {\r\n    return (\r\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n        <label htmlFor='task'>New Todo</label>\r\n        <input\r\n          type='text'\r\n          placeholder='New Todo'\r\n          id='task'\r\n          name='task'\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button>Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n//import { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass Todo extends Component {\r\n  state = {\r\n      isEditing: false,\r\n      task: this.props.task //going to task={todo.task}\r\n    };\r\n    \r\n  handleRemove = () => {\r\n    //prop is going to id={todo.id} in todolist.js\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm = () => {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  handleUpdate = (evt) => {\r\n    evt.preventDefault();\r\n    //taking new task data and passing up to parent\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange = (evt) => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleToggle = (evt) => {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className='Todo'>\r\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n            <input\r\n              type='text'\r\n              value={this.state.task}\r\n              name='task'\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className='Todo'> \r\n          <li className={this.props.completed ? \"Todo completed\" : \"Todo\"}\r\n           onClick={this.handleToggle}>\r\n            {this.props.task}\r\n          </li>\r\n        <div className='Todo-buttons'>\r\n          <button onClick={this.toggleForm}>\r\n            <i class='fas fa-pen' />\r\n          </button>\r\n          <button onClick={this.handleRemove}>\r\n            <i class='fas fa-trash' />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n      return result;\r\n  }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n  state = {\r\n      todos: []\r\n    };\r\n  create = (newTodo) => {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  }\r\n  remove = (id)=> {\r\n    this.setState({\r\n      todos: this.state.todos.filter(t => t.id !== id)\r\n    });\r\n  }\r\n  update = (id, updatedTask) => {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  toggleCompletion = (id) => {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  render() {\r\n    const todos = this.state.todos.map(todo => {\r\n      return (\r\n          <Todo\r\n            key={todo.id}\r\n            id={todo.id}\r\n            task={todo.task}\r\n            completed={todo.completed}\r\n            removeTodo={this.remove}\r\n            updateTodo={this.update}\r\n            toggleTodo={this.toggleCompletion}\r\n          />\r\n        );\r\n    });\r\n    return (\r\n      <div className='TodoList'>\r\n        <h1>\r\n          Get To Work! <span>An Animated Todo List Made With React Hooks.</span>\r\n        </h1>\r\n        <NewTodoForm createTodo={this.create} />\r\n        <ul>\r\n         {todos}\r\n        </ul>\r\n      </div> \r\n    );\r\n  }\r\n}\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}